import{defineComponent as y,ref as p,provide as C,inject as O,computed as m,watchEffect as M,onMounted as P,onUnmounted as h}from"vue";import{Keys as f}from'../../keyboard.js';import{match as I}from'../../utils/match.js';import{render as b,Features as R}from'../../utils/render.js';import{useId as E}from'../../hooks/use-id.js';import{dom as d}from'../../utils/dom.js';import{useOpenClosedProvider as w,State as v,useOpenClosed as H}from'../../internal/open-closed.js';import{useResolveButtonType as L}from'../../hooks/use-resolve-button-type.js';var j=(o=>(o[o.Open=0]="Open",o[o.Closed=1]="Closed",o))(j||{});let x=Symbol("DisclosureContext");function g(l){let r=O(x,null);if(r===null){let o=new Error(`<${l} /> is missing a parent <Disclosure /> component.`);throw Error.captureStackTrace&&Error.captureStackTrace(o,g),o}return r}let B=Symbol("DisclosurePanelContext");function $(){return O(B,null)}let Q=y({name:"Disclosure",props:{as:{type:[Object,String],default:"template"},defaultOpen:{type:[Boolean],default:!1}},setup(l,{slots:r,attrs:o}){let u=p(l.defaultOpen?0:1),e=p(null),i=p(null),s={buttonId:p(null),panelId:p(null),disclosureState:u,panel:e,button:i,toggleDisclosure(){u.value=I(u.value,{[0]:1,[1]:0})},closeDisclosure(){u.value!==1&&(u.value=1)},close(t){s.closeDisclosure();let a=(()=>t?t instanceof HTMLElement?t:t.value instanceof HTMLElement?d(t):d(s.button):d(s.button))();a==null||a.focus()}};return C(x,s),w(m(()=>I(u.value,{[0]:v.Open,[1]:v.Closed}))),()=>{let{defaultOpen:t,...a}=l,c={open:u.value===0,close:s.close};return b({theirProps:a,ourProps:{},slot:c,slots:r,attrs:o,name:"Disclosure"})}}}),V=y({name:"DisclosureButton",props:{as:{type:[Object,String],default:"button"},disabled:{type:[Boolean],default:!1},id:{type:String,default:()=>`headlessui-disclosure-button-${E()}`}},setup(l,{attrs:r,slots:o,expose:u}){let e=g("DisclosureButton");P(()=>{e.buttonId.value=l.id}),h(()=>{e.buttonId.value=null});let i=$(),s=m(()=>i===null?!1:i.value===e.panelId.value),t=p(null);u({el:t,$el:t}),s.value||M(()=>{e.button.value=t.value});let a=L(m(()=>({as:l.as,type:r.type})),t);function c(){var n;l.disabled||(s.value?(e.toggleDisclosure(),(n=d(e.button))==null||n.focus()):e.toggleDisclosure())}function D(n){var S;if(!l.disabled)if(s.value)switch(n.key){case f.Space:case f.Enter:n.preventDefault(),n.stopPropagation(),e.toggleDisclosure(),(S=d(e.button))==null||S.focus();break}else switch(n.key){case f.Space:case f.Enter:n.preventDefault(),n.stopPropagation(),e.toggleDisclosure();break}}function T(n){switch(n.key){case f.Space:n.preventDefault();break}}return()=>{let n={open:e.disclosureState.value===0},{id:S,...k}=l,K=s.value?{ref:t,type:a.value,onClick:c,onKeydown:D}:{id:S,ref:t,type:a.value,"aria-expanded":e.disclosureState.value===0,"aria-controls":d(e.panel)?e.panelId.value:void 0,disabled:l.disabled?!0:void 0,onClick:c,onKeydown:D,onKeyup:T};return b({ourProps:K,theirProps:k,slot:n,attrs:r,slots:o,name:"DisclosureButton"})}}}),X=y({name:"DisclosurePanel",props:{as:{type:[Object,String],default:"div"},static:{type:Boolean,default:!1},unmount:{type:Boolean,default:!0},id:{type:String,default:()=>`headlessui-disclosure-panel-${E()}`}},setup(l,{attrs:r,slots:o,expose:u}){let e=g("DisclosurePanel");P(()=>{e.panelId.value=l.id}),h(()=>{e.panelId.value=null}),u({el:e.panel,$el:e.panel}),C(B,e.panelId);let i=H(),s=m(()=>i!==null?(i.value&v.Open)===v.Open:e.disclosureState.value===0);return()=>{let t={open:e.disclosureState.value===0,close:e.close},{id:a,...c}=l,D={id:a,ref:e.panel};return b({ourProps:D,theirProps:c,slot:t,attrs:r,slots:o,features:R.RenderStrategy|R.Static,visible:s.value,name:"DisclosurePanel"})}}});export{Q as Disclosure,V as DisclosureButton,X as DisclosurePanel};
